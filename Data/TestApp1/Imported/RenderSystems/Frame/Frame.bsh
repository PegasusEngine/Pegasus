//*******  Frame System Utility file *******//
// Contains gpu render state of this frame. //
//******************************************//

#include "RenderSystems/Lighting/DeferredRenderer.bsh"

// Declaration of state data
struct ViewState
{
	//Deferred render resources
	deferredRenderState		    : DeferredRenderState;

	//Final lighting resources	
    hdrSurface          : RenderTarget;
    ldrSurface          : RenderTarget;
    depthSurface        : DepthStencil;
};

struct FrameState
{
    
};

#include "RenderSystems/Frame/Core.bsh"

//When in master script it will create the resources, otherwise resources are loaded. Lifetimes are owned by master script.
ViewState ReadViewState(windowId : int)
{
    newViewState = ViewState();

	w = GetFrameWidth();
	h = GetFrameHeight();

#ifdef MASTERSCRIPT_DEFINED
    //hdr frame buffer
    newViewState.hdrSurface       = CreateRenderTarget(RenderTargetConfig(w, h, FORMAT_RGBA_16_FLOAT));
    GlobalRegisterRenderTarget("hdrSurface", windowId, newViewState.hdrSurface);

    //depth buffer
    newViewState.depthSurface = CreateDepthStencil(DepthStencilConfig(w, h, 1));
    GlobalRegisterDepthStencil("depthSurface", windowId, newViewState.depthSurface);

    //ldr frame buffer
    newViewState.ldrSurface       = CreateRenderTarget(RenderTargetConfig(w, h, FORMAT_RGBA_8_UNORM));
    GlobalRegisterRenderTarget("ldrSurface", windowId, newViewState.ldrSurface);

#else
    //hdr frame buffer
    newViewState.hdrSurface  = GlobalFindRenderTarget("hdrSurface", windowId);

    //depth buffer
    newViewState.depthSurface = GlobalFindDepthStencilTarget("depthSurface", windowId);

    //ldr frame buffer
    newViewState.ldrSurface = GlobalFindRenderTarget("ldrSurface", windowId);

#endif

	newViewState.deferredRenderState = ReadDeferredRenderState(windowId, w, h, newViewState.depthSurface);

	return newViewState;
}

FrameState ReadFrameState()
{
    newFrameState = FrameState();
    return newFrameState;
}
