//***********************************************//
//*******  Deferred Renderer Passes file *******//
//***********************************************//

#include "RenderSystems/Frame/Frame.bsh"

//Options:
@(EditorType=EDITOR_TYPE_CHECKBOX)
extern DrawSky = 0;


gLightTileSize = 32;

/// Definitions 
struct DeferredPassRendererResources
{
	applyLightsCs : ProgramLinkage;
	applyLightsConstantBuffer : Buffer;
	applyLightsSourceLightBuffer : Buffer;
	applyLightsConstantUniform : Uniform;
	applyLightsGbuffer0Uniform : Uniform;
	applyLightsGbuffer1Uniform : Uniform;
	applyLightsInputBufferUniform : Uniform;
	applyLightsDepthBuffer : Uniform;
	applyLightsStencilBuffer : Uniform;
};

struct DeferredApplyLightsConstants
{
	targetWidth : int;
	targetHeight : int;
	activeLightCount : int;
	padding : int;
};

skyObject = CreateBasicSky();

DeferredPassRendererResources CreateDeferredPassResources()
{
	rs = DeferredPassRendererResources();
	rs.applyLightsCs = LoadProgram("RenderSystems/Lighting/DeferredApplyLights.pas");
	rs.applyLightsConstantBuffer  = CreateUniformBuffer(sizeof(DeferredApplyLightsConstants));
	rs.applyLightsConstantUniform = GetUniformLocation(rs.applyLightsCs, "Constants");
	rs.applyLightsGbuffer0Uniform = GetUniformLocation(rs.applyLightsCs, "GBuffer0Texture");
	rs.applyLightsGbuffer1Uniform = GetUniformLocation(rs.applyLightsCs, "GBuffer1Texture");
	rs.applyLightsInputBufferUniform = GetUniformLocation(rs.applyLightsCs, "LightInputBuffer");
	rs.applyLightsDepthBuffer     = GetUniformLocation(rs.applyLightsCs, "DepthTexture");
	rs.applyLightsStencilBuffer   = GetUniformLocation(rs.applyLightsCs, "StencilTexture");
	return rs;
}

int CallDeferredApplyLights(constants : DeferredApplyLightsConstants, deferredState: DeferredRenderState, resources: DeferredPassRendererResources)
{
	UnbindRenderTargets();
	SetBuffer(resources.applyLightsConstantBuffer, constants);
	SetProgram(resources.applyLightsCs);
	SetUniformBuffer(resources.applyLightsConstantUniform,resources.applyLightsConstantBuffer);
	SetUniformTextureRenderTarget(resources.applyLightsGbuffer0Uniform, deferredState.gbuffer0);
	SetUniformTextureRenderTarget(resources.applyLightsGbuffer1Uniform, deferredState.gbuffer1);
	SetUniformBufferResource(resources.applyLightsInputBufferUniform,resources.applyLightsSourceLightBuffer);
	SetUniformDepth(resources.applyLightsDepthBuffer,     deferredState.outDepthBuffer);
	SetUniformStencil(resources.applyLightsStencilBuffer,     deferredState.outDepthBuffer);
	SetComputeOutput(deferredState.outHdrBuffer, 0);
	Dispatch(divUp(constants.targetWidth,gLightTileSize),divUp(constants.targetHeight,gLightTileSize),1);
	UnbindComputeResources();
	UnbindComputeOutputs();

}

gPassResources = CreateDeferredPassResources();
gPassResources.applyLightsSourceLightBuffer = LoadCulledLightBuffer();

int Timeline_Update(info: UpdateInfo)
{
	skyObject.Visible = DrawSky;
}

int Timeline_Render(info: RenderInfo)
{
	UnbindRenderTargets();
	BeginMarker("DeferredLighting");
	viewState = GetViewState(info.windowId);
	constants =	DeferredApplyLightsConstants();
	constants.targetWidth = GetFrameWidth();
	constants.targetHeight = GetFrameHeight();
	constants.activeLightCount = GetActiveLightCount();
	CallDeferredApplyLights(constants, viewState.deferredRenderState, gPassResources);
	UnbindComputeResources();
	UnbindComputeOutputs();

	SetRenderTarget(viewState.deferredRenderState.outHdrBuffer, viewState.deferredRenderState.outDepthBuffer);	
	skyObject->Draw();
	UnbindRenderTargets();

	EndMarker();

	
}