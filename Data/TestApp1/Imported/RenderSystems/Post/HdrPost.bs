//*************************************************************************//
//*******  Hdr Post  - resolves into tone mapping / hdr compositing *******//
//*************************************************************************//
#include "RenderSystems/Frame/Frame.bsh"

#define HDR_POST_TILE_SIZE 32

extern exposureValue = 0.99;


struct HdrPostConstants
{
	width : int;
	height : int;
	exposureVal : float;
	pad0 : int;
};

hdrPostProgram = LoadProgram("RenderSystems/Post/HdrPost.pas");
hdrPostProgramUniform  = GetUniformLocation(hdrPostProgram, "Constants");
hdrPostHdrSceneInUniform = GetUniformLocation(hdrPostProgram, "HdrSceneIn");
hdrPostProgramUniformBuffer = CreateUniformBuffer(sizeof(HdrPostConstants));


int Timeline_Render(info: RenderInfo)
{

	BeginMarker("HdrPost");
	viewState = GetViewState(info.windowId);
	hdrPostConstants = HdrPostConstants(GetFrameWidth(), GetFrameHeight(),exposureValue,0);
	SetBuffer(hdrPostProgramUniformBuffer,hdrPostConstants);
	SetProgram(hdrPostProgram);
	SetUniformBuffer(hdrPostProgramUniform,hdrPostProgramUniformBuffer);
	SetUniformTextureRenderTarget(hdrPostHdrSceneInUniform,viewState.hdrSurface);
	SetComputeOutput(viewState.ldrSurface,0);
	Dispatch(divUp(hdrPostConstants.width,HDR_POST_TILE_SIZE),divUp(hdrPostConstants.height,HDR_POST_TILE_SIZE),1);
	UnbindComputeResources();
	UnbindComputeOutputs();
	EndMarker();
}