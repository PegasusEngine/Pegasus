
struct MeshState{
	uWorld : float4x4;
	uProj : float4x4;
};

struct PixelState {
	uCameraPos_beat : float4;
	uCenterPos_unused: float4;
	uLightPosition : float4;
};

gMarbleState = MeshState();
gPixelState = PixelState();

extern	SphereCenter = float3(-0.0,0.0,-2.7);
// PROGRAMS //
marbleProgram = LoadProgram("PartyDemo/programSphere.pas");
marbleStateUniform = GetUniformLocation(marbleProgram , "uniformState");
marblePixelUniform = GetUniformLocation(marbleProgram, "pixelUniformState");

marbleStateBuffer = CreateUniformBuffer(sizeof(MeshState));
marblePixelBuffer = CreateUniformBuffer(sizeof(PixelState));
//////////////

// MESH //
sphereMesh = CreateMesh();
icosphere = CreateMeshGenerator("IcosphereGenerator");
sphereMesh->SetGeneratorInput(icosphere);
icosphere.Degree = 5;

//////////////

cullConfig = RasterizerConfig();
cullConfig.CullMode = CW_CM;
cullConfig.DepthFunc = LESSER_DF;
cullState = CreateRasterizerState(cullConfig);


int SetupState(info : RenderInfo)
{
	aspect = info.aspect;
	//SETUP CAMERA
	gMarbleState.uProj = GetProjection(1.2,aspect,0.01,500.0);
	//SETUP SPHERE WORLD
	worldMat = float4x4 (
		1.0, 0.0, 0.0, SphereCenter.x,
		0.0, 1.0, 0.0, SphereCenter.y,
		0.0, 0.0, 1.0, SphereCenter.z,
		0.0, 0.0, 0.0, 1.0 
	);
	gMarbleState.uWorld = worldMat;
	
	gPixelState.uCameraPos_beat = float4(float3(0.0,0.0,0.0),info.beat);
	gPixelState.uCenterPos_unused = float4(SphereCenter, 1.0);
	speed = 0.5;
	gPixelState.uLightPosition = float4(1.0*sin(info.beat*speed*3.14),1.0*sin(1.0-info.beat),1.0*cos(info.beat*speed*3.14),0.0);
}

int Timeline_Update(info : UpdateInfo)
{
}


int Timeline_Render(info : RenderInfo)
{

	SetupState(info);
	/// RENDER MARBLE
	Clear(1,0,0);
	SetClearColorValue(float4(0,0,0,1));

	SetRasterizerState(cullState);
	SetProgram(marbleProgram);
	SetMesh(sphereMesh);
	SetBuffer(marbleStateBuffer, gMarbleState);
	SetBuffer(marblePixelBuffer, gPixelState);
	SetUniformBuffer(marbleStateUniform, marbleStateBuffer);
	SetUniformBuffer(marblePixelUniform, marblePixelBuffer);
	Draw();
	
}