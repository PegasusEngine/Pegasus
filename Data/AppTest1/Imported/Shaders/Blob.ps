//
//Blob Triangle ps, by Kleber Garcia 2013
//

#version 430 core

in  vec4 screenPos;
out vec4 color;                     
uniform float time;

vec3 twist(vec3 p)
{
    p = vec3(0.3*sin((p.y+time*0.001)*2.7)+p.x,p.y,0.3*cos((p.y+time*0.001)*2.2)+p.z) ;
    return p;
}

void main()                       
{                                  
    vec3 camPos = vec3(0,0,-1);   
    vec3 camDir = normalize(screenPos.xyz - camPos);
    vec3 p = camPos; 
    float d = 10000;
    int j = 0;      
    for (int i = 0; i < 32; ++i)
    {
        const float radius = 0.7;
        vec3 twisted = twist(p);
        d = length(vec3(0,0,0.9) - twisted) - 0.7;
        if (d < 0.001)
        {
            break;
        }
        else
        {
            p += camDir * d;
            j = i; 
        }
    }
    vec4 sphere = (d < 0.001 ? 1.0f : 0.0f) * vec4(0.7f * float(j)/32.0f + 0.2f, float(j)/32.0f + 0.1f,0,0);
    color = vec4(0,0,0.2,1) + sphere ;
}

