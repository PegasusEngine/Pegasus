#line 2 "bs.lexer.cpp"

#line 4 "bs.lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE BS_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via BS_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void BS_restart (FILE *input_file ,yyscan_t yyscanner );
void BS__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE BS__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void BS__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void BS__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void BS_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void BS_pop_buffer_state (yyscan_t yyscanner );

static void BS_ensure_buffer_stack (yyscan_t yyscanner );
static void BS__load_buffer_state (yyscan_t yyscanner );
static void BS__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER BS__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE BS__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE BS__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE BS__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *BS_alloc (yy_size_t ,yyscan_t yyscanner );
void *BS_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void BS_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer BS__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        BS_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            BS__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        BS_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            BS__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define BS_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[156] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   70,   30,   31,   70,   29,
       26,   50,   70,   62,   63,   48,   46,   68,   47,   61,
       49,   43,   69,   44,   54,   59,   53,   45,   66,   67,
       45,   45,   45,   45,   45,   64,   70,   65,    2,    1,
        5,    4,    5,    7,   71,    6,   25,   23,   22,   21,
       25,   24,   24,   24,   24,   12,   11,   10,    9,    8,
       52,   57,   60,   28,   27,    0,   43,   45,   56,   51,
       55,   45,   45,   45,   32,   45,   45,   45,   45,   58,
        3,   20,   19,   24,   24,   24,   24,   24,   24,   42,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   24,
       24,   24,   24,   24,   24,   33,   34,   37,   45,   45,
       45,   45,   45,   45,   24,   17,   16,   24,   24,   24,
       45,   45,   45,   45,   45,   38,   24,   18,   15,   24,
       41,   35,   40,   45,   36,   14,   24,   45,   13,   45,
       45,   45,   45,   39,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       24,    1,   25,    1,   26,    1,   27,   23,   28,   29,

       30,   31,   23,   32,   33,   23,   23,   34,   35,   36,
       37,   23,   23,   38,   39,   40,   41,   23,   42,   43,
       44,   45,   46,   47,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    3,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[163] =
    {   0,
        0,    0,  263,  262,   46,   47,   48,   49,   58,    0,
      261,  260,  104,  105,  262,  267,  267,  267,  240,  267,
      267,  267,  252,  267,  267,  267,  267,  267,  237,  267,
       98,   98,  267,  267,  237,  236,  235,  240,  267,  267,
       97,  101,  104,  102,  105,  267,  207,  267,  267,  267,
      267,  267,  237,  267,  267,  267,  267,  267,  267,  267,
      107,    0,  222,   88,   90,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  234,  110,  235,  267,  267,
      267,  113,  114,  121,  234,  123,  115,  124,  126,  267,
      267,  267,  267,    0,  217,  110,  218,  217,  217,  227,

      133,  135,  132,  138,  129,  139,  141,  130,  142,  210,
      193,  193,  189,  191,  186,  204,  203,  202,  151,  157,
      143,  158,  159,  160,  180,    0,    0,  184,  183,  172,
      162,  163,  169,  164,  167,  197,  180,    0,    0,  179,
      191,  189,  188,  168,  187,    0,  171,  170,    0,  171,
      173,  178,  181,   41,  267,  225,  228,  231,  234,  237,
      239,   52
    } ;

static yyconst flex_int16_t yy_def[163] =
    {   0,
      155,    1,  156,  156,  157,  157,  158,  158,  155,    9,
      159,  159,  160,  160,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  161,  155,  155,  155,  155,  155,  161,  155,  155,
      161,  161,  161,  161,  161,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  162,  162,  162,  162,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  161,  161,  155,  155,
      155,  161,  161,  161,  161,  161,  161,  161,  161,  155,
      155,  155,  155,  162,  162,  162,  162,  162,  162,  155,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  162,
      162,  162,  162,  162,  162,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  162,  162,  162,  162,  162,  162,
      161,  161,  161,  161,  161,  161,  162,  162,  162,  162,
      161,  161,  161,  161,  161,  162,  162,  161,  162,  161,
      161,  161,  161,  161,    0,  155,  155,  155,  155,  155,
      155,  155
    } ;

static yyconst flex_int16_t yy_nxt[316] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   38,   38,   38,   38,   41,
       38,   38,   42,   38,   38,   38,   38,   43,   44,   38,
       38,   45,   38,   38,   38,   46,   47,   48,   52,   52,
       55,   55,   56,   56,   94,  155,   53,   53,   57,   58,
       59,   57,   60,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   61,   62,   57,   57,   57,   57,   57,
       62,   57,   57,   62,   62,   62,   63,   64,   62,   62,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   57,   57,   57,   69,   69,   74,   70,
       70,  155,   76,   75,   77,  155,  155,   92,  155,  155,
       98,   96,   93,   97,   76,   99,   77,  155,  155,  155,
       82,   85,   83,   86,   87,  155,   89,  155,  155,   84,
      155,   88,  111,  155,  155,  101,  155,  155,  112,  155,
      107,  102,  155,  155,  103,  155,  155,  155,  109,  106,
      104,  108,  105,  116,  117,  155,  118,  119,  121,  120,
      123,  155,  155,  155,  155,  124,  155,  155,  155,  133,
      122,  155,  155,  155,  155,  155,  135,  155,  131,  136,
      134,  144,  155,  148,  132,  155,  150,  141,  142,  143,

      149,  155,  155,  155,  153,  155,  145,  147,  151,  146,
      152,  155,  140,  139,  138,  137,  155,  155,  155,  130,
      129,  128,  127,  126,  154,   49,   49,   49,   51,   51,
       51,   54,   54,   54,   66,   66,   66,   68,   68,   68,
       78,   78,  125,  100,  115,  114,  113,  110,  155,  155,
      100,   95,   91,   90,  155,   81,   80,   79,   73,   72,
       71,  155,   67,   67,   50,   50,   15,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155
    } ;

static yyconst flex_int16_t yy_chk[316] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        7,    8,    7,    8,  162,  154,    5,    6,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,   13,   14,   31,   13,
       14,   41,   32,   31,   32,   42,   44,   61,   43,   45,
       65,   64,   61,   64,   77,   65,   77,   82,   83,   87,
       41,   42,   41,   43,   44,   84,   45,   86,   88,   41,
       89,   44,   96,  105,  108,   82,  103,  101,   96,  102,
       88,   82,  104,  106,   83,  107,  109,  121,   89,   87,
       84,   88,   86,  101,  102,  119,  103,  104,  106,  105,
      108,  120,  122,  123,  124,  109,  131,  132,  134,  121,
      107,  135,  144,  133,  148,  150,  123,  151,  119,  124,
      122,  134,  152,  144,  120,  153,  148,  131,  132,  133,

      147,  145,  143,  142,  152,  141,  135,  140,  150,  137,
      151,  136,  130,  129,  128,  125,  118,  117,  116,  115,
      114,  113,  112,  111,  153,  156,  156,  156,  157,  157,
      157,  158,  158,  158,  159,  159,  159,  160,  160,  160,
      161,  161,  110,  100,   99,   98,   97,   95,   85,   78,
       76,   63,   53,   47,   38,   37,   36,   35,   29,   23,
       19,   15,   12,   11,    4,    3,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "bs.l"
/****************************************************************************************/
/*                                                                                      */
/*                                       Pegasus                                        */
/*                                                                                      */
/****************************************************************************************/
/*!
   \file   bs.l
   \author Kleber Garcia
   \date   August 27th 2014
   \brief  lexer generator file (input to flex tool). 
           This file contains a regex lexer description of the BlockScript scripting language.
           This grammar gets parsed and becomes a cpp file containing the necesary functions for lexing
*/
#line 21 "bs.l"
    #define YY_EXTRA_TYPE class CompilerState*

    /****************************************************************************************/
    /*                                                                                      */
    /*                                       Pegasus                                        */
    /*                                                                                      */
    /****************************************************************************************/
    //! \file   bs.lexer.cpp
    //! \author Kleber Garcia
    //! \brief  Generated file from flex tool.

    #include "Pegasus/BlockScript/BlockScriptBuilder.h"
    #include "Pegasus/BlockScript/BlockScriptAst.h"
    #include "Pegasus/BlockScript/Preprocessor.h"
    #include "Pegasus/BlockScript/bs.parser.hpp"
    #include "Pegasus/BlockScript/IFileIncluder.h"
    #include "Pegasus/Utils/String.h"
    #include "Pegasus/Utils/Memcpy.h"
    #include "Pegasus/BlockScript/CompilerState.h"
    #include "Pegasus/Core/Io.h"

    #define BS_TOKEN(t)   return (yylval->token = t);
    #define BS_INT(t)     yylval->integerValue = Pegasus::Utils::Atoi(yytext); return t;
    #define BS_FLOAT(t)   yylval->floatValue = Pegasus::Utils::Atof(yytext); return t;

    //customize input
    #undef YY_INPUT
    #define YY_INPUT(buffer, bytesToRead, maxToRead) BS_readInput(yyg, buffer, bytesToRead, maxToRead)

    using namespace Pegasus::BlockScript;
    using namespace Pegasus::Io;

    
    extern void BS_ErrorDispatcher(BlockScriptBuilder* builder, const char* message) ;


    bool BS_HasNext(void* ptr);

    int BS_readInput(struct yyguts_t* yyg, char * buffer, yy_size_t& result, int maxToRead);






#line 614 "bs.lexer.cpp"

#define INITIAL 0
#define IN_LINE_COMMENT 1
#define MULTI_COMMENT 2
#define STRING_BLOCK 3
#define PREPROCESSOR 4
#define PREPROCESSOR_DEFINE_CAPTURE 5
#define PREPROCESSOR_IGNORE_CODE 6

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int BS_lex_init (yyscan_t* scanner);

int BS_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int BS_lex_destroy (yyscan_t yyscanner );

int BS_get_debug (yyscan_t yyscanner );

void BS_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE BS_get_extra (yyscan_t yyscanner );

void BS_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *BS_get_in (yyscan_t yyscanner );

void BS_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *BS_get_out (yyscan_t yyscanner );

void BS_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t BS_get_leng (yyscan_t yyscanner );

char *BS_get_text (yyscan_t yyscanner );

int BS_get_lineno (yyscan_t yyscanner );

void BS_set_lineno (int line_number ,yyscan_t yyscanner );

int BS_get_column  (yyscan_t yyscanner );

void BS_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * BS_get_lval (yyscan_t yyscanner );

void BS_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int BS_wrap (yyscan_t yyscanner );
#else
extern int BS_wrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int BS_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int BS_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 69 "bs.l"

#line 856 "bs.lexer.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			BS_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				BS__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		BS__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 156 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 267 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "bs.l"
{ yyextra->mBuilder->IncrementLine(); BEGIN(yyextra->PopLexerState()); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "bs.l"
;
	YY_BREAK



case 3:
YY_RULE_SETUP
#line 77 "bs.l"
{ BEGIN(yyextra->PopLexerState()); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 78 "bs.l"
{ yyextra->mBuilder->IncrementLine(); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "bs.l"
;
	YY_BREAK



case 6:
YY_RULE_SETUP
#line 84 "bs.l"
{
        BEGIN(yyextra->PopLexerState()); 
        PG_ASSERT(yyextra->mStringAccumulatorPos < 512);
        yyextra->mStringAccumulator[yyextra->mStringAccumulatorPos] = '\0';
        yylval->identifierText = yyextra->mStringAccumulator;

        if (YYSTATE == PREPROCESSOR)
        {
            const char* strImm = yyextra->mBuilder->AllocStrImm(yyextra->mStringAccumulator);
            if (strImm != nullptr)
            {
                yyextra->GetPreprocessor().PushCode(yyextra->mBuilder->AllocStrImm(strImm));
            }
            else
            {
                yyterminate();
            }
        }
        else
        {
            return I_STRING;
        }
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "bs.l"
{
        if (yyextra->mStringAccumulatorPos >= 511)
        {
            BS_ErrorDispatcher(yyextra->mBuilder, "Out of string block memory! keep imm strings within 512 chars.");
            yyterminate();
        }
        else
        {
             yyextra->mStringAccumulator[yyextra->mStringAccumulatorPos++] = *yytext;
        }
    }
	YY_BREAK



case 8:
YY_RULE_SETUP
#line 122 "bs.l"
{
        BEGIN(PREPROCESSOR);
   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 125 "bs.l"
{ 
        yyextra->mBuilder->IncrementLine(); 
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 128 "bs.l"
;
	YY_BREAK



case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 133 "bs.l"
{
        yyextra->mBuilder->IncrementLine(); 
        if (yyextra->mStringAccumulatorPos >= 511)
        {
            BS_ErrorDispatcher(yyextra->mBuilder, "Out of string block memory! keep macro strings within 512 chars.");
            yyterminate();
        }
        else
        {
             Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
             yyextra->mStringAccumulator[yyextra->mStringAccumulatorPos++] = '\0';
             const char* copiedString = yyextra->mBuilder->AllocStrImm(yyextra->mStringAccumulator);
             pp.PushCode(copiedString);
             yyextra->mStringAccumulatorPos = 0;
             const char* msg = nullptr;
             if (!pp.FlushCommand(&msg))
             {
                 BS_ErrorDispatcher(yyextra->mBuilder, msg); yyterminate();
             }
             else
             {
			     if (pp.IsIfActive())
				 {
				     BEGIN(yyextra->PopLexerState()); 
				 }
				 else
				 {
					 BEGIN(PREPROCESSOR_IGNORE_CODE);
				 }
                 
             }
        }
    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "bs.l"
{
        if (yyextra->mStringAccumulatorPos >= 511)
        {
            BS_ErrorDispatcher(yyextra->mBuilder, "Out of string block memory! keep macro strings within 512 chars.");
            yyterminate();
        }
        else
        {
             if (*yytext != 32)
                yyextra->mStringAccumulator[yyextra->mStringAccumulatorPos++] = *yytext;
        }
    }
	YY_BREAK



case 13:
YY_RULE_SETUP
#line 182 "bs.l"
{
                 Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                 if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                 {
                     BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'include' "); yyterminate();
                 }
                 else
                 {
                     pp.IncludeCmd(); 
                 }
           }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 193 "bs.l"
{  
                 Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                 if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                 {
                     BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'define' "); yyterminate();
                 }
                 else
                 {
                     pp.DefineCmd(); 
                 }
           }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 204 "bs.l"
{
                Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                {
                    BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'ifdef' "); yyterminate();
                }
                else
                {
                    bool ifActive = pp.IsIfActive();
                    pp.NewState();
                    pp.IfCmd();
                    pp.SetChosePath(false);
                    pp.SetIfActive(ifActive);
                }
           }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 219 "bs.l"
{
                Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                {
                    BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'else' "); yyterminate();
                }
                else
                {
                    if (pp.StateCount() >= 2)
                    {
                        bool chosePrevIfStmt = pp.ChosePath(); //was a previous condition true?
                        pp.PopState();
                        bool isActive = pp.IsIfActive();
                        pp.NewState();
                        pp.ElseCmd();
                        pp.SetChosePath(chosePrevIfStmt);
                        pp.SetIfActive(!chosePrevIfStmt && isActive);
                    }
                    else
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'else' "); yyterminate();
                    }
                }
                
           }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 244 "bs.l"
{
                Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                {
                    BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'elif' "); yyterminate();
                }
                else
                {
                    if (pp.StateCount() >= 2)
                    {
                        bool chosePrevIfStmt = pp.ChosePath(); //was a previous condition true?
                        pp.PopState();
                        bool isActive = pp.IsIfActive();
                        pp.NewState();
                        pp.ElseIfCmd();
                        pp.SetChosePath(chosePrevIfStmt);
                        pp.SetIfActive(!chosePrevIfStmt && isActive);
                    }
                    else
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'elif' "); yyterminate();
                    }
                }
           }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 268 "bs.l"
{
                Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_NONE)
                {
                    BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue preprocessor command 'endif' "); yyterminate();
                }
                else
                {
                    pp.EndIfCmd();
                }
           }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 279 "bs.l"
{ yyextra->PushLexerState(YYSTATE);BEGIN(IN_LINE_COMMENT);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 280 "bs.l"
{ yyextra->PushLexerState(YYSTATE);BEGIN(MULTI_COMMENT);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 281 "bs.l"
{ 
                if (yyextra->GetPreprocessor().GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_INCLUDE) 
                {
                    BS_ErrorDispatcher(yyextra->mBuilder, "Invalid argument for PP command"); yyterminate();
                }
                else
                {
                    yyextra->mStringAccumulatorPos = 0; yyextra->PushLexerState(YYSTATE); BEGIN(STRING_BLOCK); 
                }
           }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 291 "bs.l"
{ 
                yyextra->mBuilder->IncrementLine(); 
                Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                if (pp.GetCmd() == Pegasus::BlockScript::Preprocessor::PP_CMD_IF || pp.GetCmd() == Pegasus::BlockScript::Preprocessor::PP_CMD_ELSEIF)
                {
                   
                    const char* preprocessorDefine = pp.GetStringArg();
                    pp.NoneCmd();

                    if (preprocessorDefine == nullptr)
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, "Invalid argument for PP command"); yyterminate();
                    }
                
                    if (pp.IsIfActive() && !pp.ChosePath())
                    {
                        bool isDefined = pp.FindDefinitionByName( preprocessorDefine ) != nullptr;
                        if (isDefined)
                        {
                            pp.SetChosePath(true);
                            BEGIN(yyextra->PopLexerState());
                        }
                        else
                        {
                            pp.SetIfActive(false);
                            BEGIN(PREPROCESSOR_IGNORE_CODE);
                        }
                    }
                    else
                    {
                        BEGIN(PREPROCESSOR_IGNORE_CODE);
                    }
                    
                }
                else if (pp.GetCmd() == Pegasus::BlockScript::Preprocessor::PP_CMD_ELSE)
                {
                    pp.NoneCmd();
                    if (pp.IsIfActive() && !pp.ChosePath())
                    {
                        BEGIN(yyextra->PopLexerState());
                    }
                    else
                    {
                        pp.SetIfActive(false);
                        BEGIN(PREPROCESSOR_IGNORE_CODE);
                    }
                }
                else if (pp.GetCmd() == Pegasus::BlockScript::Preprocessor::PP_CMD_ENDIF)
                {
                    if (pp.StateCount() <= 1)
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, "Can't queue endif preprocessor command"); yyterminate();
                    }
                    else
                    {
                        pp.PopState();
                        pp.NoneCmd();
                        if (pp.IsIfActive())
                        {
                            BEGIN(yyextra->PopLexerState());
                        }
                        else
                        {
                            BEGIN(PREPROCESSOR_IGNORE_CODE);
                        }
                    }
                }
                else
                {
                    const char* msg = nullptr;

                    if (!pp.FlushCommand(&msg))
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, msg); yyterminate();
                    }
                    else
                    {
                        if (pp.HasIncludeBuffer())
                        {
                            const char* buffer = nullptr;
                            int bufferSize = 0;
                            yyextra->PushDefineStack(YY_CURRENT_BUFFER, pp.GetIncludeDefinition());
                            BS_push_buffer_state(BS__create_buffer(NULL,YY_BUF_SIZE,yyscanner),yyscanner);
                        }

                        if (pp.IsIfActive())
                        {
                            BEGIN(yyextra->PopLexerState()); 
                        }
                        else
                        {
                            BEGIN(PREPROCESSOR_IGNORE_CODE);
                        }
                    }
                }
           }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 387 "bs.l"
;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 388 "bs.l"
{
                    Pegasus::BlockScript::Preprocessor& pp = yyextra->GetPreprocessor();
                    if (
                            pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_DEFINE &&
                            pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_IF     &&
                            pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_ELSEIF 
                       )
                    {
                        BS_ErrorDispatcher(yyextra->mBuilder, "Invalid identifier token for preprocessor command."); yyterminate();
                    }
                    else
                    {
                        char * str = yyextra->mBuilder->GetStringPool().AllocateString();
                        if (str == nullptr) { BS_ErrorDispatcher( yyextra->mBuilder, "Out of identifier memory!"); yyterminate(); }
						str[0] = '\0';
                        Pegasus::Utils::Strcat(str, yytext);
                        pp.PushString(yyextra->mBuilder->AllocStrImm(yytext));
                        
                        if (pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_IF &&
                            pp.GetCmd() != Pegasus::BlockScript::Preprocessor::PP_CMD_ELSEIF)
                        {
                            yyextra->mStringAccumulatorPos = 0;
                            yyextra->mStringAccumulator[yyextra->mStringAccumulatorPos] = '\0';

                            BEGIN(PREPROCESSOR_DEFINE_CAPTURE);
                        }
                    } 
                }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 416 "bs.l"
{ BS_ErrorDispatcher( yyextra->mBuilder, "Invalid token for preprocessor."); yyterminate(); }
	YY_BREAK



case 26:
YY_RULE_SETUP
#line 421 "bs.l"
{ yyextra->PushLexerState(YYSTATE); BEGIN(PREPROCESSOR);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 422 "bs.l"
{ yyextra->PushLexerState(YYSTATE);BEGIN(IN_LINE_COMMENT);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 423 "bs.l"
{ yyextra->PushLexerState(YYSTATE);BEGIN(MULTI_COMMENT);  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 424 "bs.l"
{ yyextra->mStringAccumulatorPos = 0; yyextra->PushLexerState(YYSTATE);BEGIN(STRING_BLOCK); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 425 "bs.l"
;
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 426 "bs.l"
{ yyextra->mBuilder->IncrementLine();       }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 427 "bs.l"
{ return K_IF;     }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 428 "bs.l"
{ return K_ELSE_IF;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 429 "bs.l"
{ return K_ELSE;   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 430 "bs.l"
{ return K_RETURN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 431 "bs.l"
{ return K_STRUCT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 432 "bs.l"
{ return K_ENUM;   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 433 "bs.l"
{ return K_WHILE;  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 434 "bs.l"
{ return K_STATIC_ARRAY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 435 "bs.l"
{ return K_SIZE_OF;      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 436 "bs.l"
{ return K_EXTERN;       }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 437 "bs.l"
{ BS_FLOAT(I_FLOAT);     }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 438 "bs.l"
{ BS_INT(I_INT);         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 439 "bs.l"
{ BS_TOKEN(K_SEMICOLON); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 440 "bs.l"
{ 
                    bool isTypeString = false;
                    int strLen = Pegasus::Utils::Strlen(yytext) + 1;
                    if (strLen >=  Pegasus::BlockScript::IddStrPool::sCharsPerString){
                        BS_ErrorDispatcher(yyextra->mBuilder, "Identifier string too long!\n");
                        yyterminate();
                    }else{
                        char * str = yyextra->mBuilder->GetStringPool().AllocateString();
                        if (str == nullptr) { BS_ErrorDispatcher( yyextra->mBuilder, "Out of identifier memory!"); yyterminate(); }
                        yylval->identifierText = str;
                        str[0] = '\0';
                        Pegasus::Utils::Strcat(str, yytext);
                        
                        const Pegasus::BlockScript::Preprocessor::Definition* preprocessorDefinition = yyextra->GetPreprocessor().FindDefinitionByName(str);
                        if (preprocessorDefinition != nullptr)
                        {
                            yyextra->PushDefineStack(YY_CURRENT_BUFFER, preprocessorDefinition);
                            BS_push_buffer_state(BS__create_buffer(NULL,YY_BUF_SIZE,yyscanner),yyscanner);
                        }
                        else
                        {
                            isTypeString = yyextra->mBuilder->GetSymbolTable()->GetTypeByName(str) != nullptr;
                            return isTypeString ? TYPE_IDENTIFIER : IDENTIFIER;
                        }
                    }
                }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 466 "bs.l"
{ BS_TOKEN(O_PLUS);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 467 "bs.l"
{ BS_TOKEN(O_MINUS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 468 "bs.l"
{ BS_TOKEN(O_MUL);   }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 469 "bs.l"
{ BS_TOKEN(O_DIV);   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 470 "bs.l"
{ BS_TOKEN(O_MOD);   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 471 "bs.l"
{ BS_TOKEN(O_EQ);    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 472 "bs.l"
{ BS_TOKEN(O_NEQ);    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 473 "bs.l"
{ BS_TOKEN(O_GT);    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 474 "bs.l"
{ BS_TOKEN(O_LT);    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 475 "bs.l"
{ BS_TOKEN(O_GTE);   }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 476 "bs.l"
{ BS_TOKEN(O_LTE);   }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 477 "bs.l"
{ BS_TOKEN(O_LAND); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 478 "bs.l"
{ BS_TOKEN(O_LOR);  }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 479 "bs.l"
{ BS_TOKEN(O_SET);  }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 480 "bs.l"
{ BS_TOKEN(O_METHOD_CALL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 481 "bs.l"
{ BS_TOKEN(O_DOT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 482 "bs.l"
{ return K_L_PAREN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 483 "bs.l"
{ return K_R_PAREN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 484 "bs.l"
{ return K_L_BRAC;  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 485 "bs.l"
{ return K_R_BRAC;  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 486 "bs.l"
{ return K_L_LACE;  }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 487 "bs.l"
{ return K_R_LACE;  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 488 "bs.l"
{ return K_COMMA;   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 489 "bs.l"
{ return K_COL;     }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 490 "bs.l"
;
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_LINE_COMMENT):
case YY_STATE_EOF(MULTI_COMMENT):
case YY_STATE_EOF(STRING_BLOCK):
case YY_STATE_EOF(PREPROCESSOR):
case YY_STATE_EOF(PREPROCESSOR_DEFINE_CAPTURE):
case YY_STATE_EOF(PREPROCESSOR_IGNORE_CODE):
#line 493 "bs.l"
{
                    if (yyextra->GetDefineStackCount() > 0)
                    {
                        BS__delete_buffer(YY_CURRENT_BUFFER,yyscanner); 
                        BS__switch_to_buffer((YY_BUFFER_STATE)yyextra->PopDefineStack(),yyscanner);
                    }
					else
					{
						yyterminate();
					}
                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 504 "bs.l"
ECHO;
	YY_BREAK
#line 1667 "bs.lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * BS_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( BS_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of BS_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					BS_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			BS_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) BS_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 156 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 156 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 155);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					BS_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( BS_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void BS_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        BS_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            BS__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	BS__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	BS__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void BS__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		BS_pop_buffer_state();
	 *		BS_push_buffer_state(new_buffer);
     */
	BS_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	BS__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (BS_wrap()) processing, but the only time this flag
	 * is looked at is after BS_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void BS__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE BS__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) BS_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in BS__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) BS_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in BS__create_buffer()" );

	b->yy_is_our_buffer = 1;

	BS__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with BS__create_buffer()
 * @param yyscanner The scanner object.
 */
    void BS__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		BS_free((void *) b->yy_ch_buf ,yyscanner );

	BS_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a BS_restart() or at EOF.
 */
    static void BS__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	BS__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then BS__init_buffer was _probably_
     * called from BS_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void BS__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		BS__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void BS_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	BS_ensure_buffer_stack(yyscanner);

	/* This block is copied from BS__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from BS__switch_to_buffer. */
	BS__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void BS_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	BS__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		BS__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void BS_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)BS_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in BS_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)BS_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in BS_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE BS__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) BS_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in BS__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	BS__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to BS_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       BS__scan_bytes() instead.
 */
YY_BUFFER_STATE BS__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return BS__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to BS_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE BS__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) BS_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in BS__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = BS__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in BS__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE BS_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int BS_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int BS_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *BS_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *BS_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t BS_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *BS_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void BS_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void BS_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "BS_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void BS_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "BS_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see BS__switch_to_buffer
 */
void BS_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void BS_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int BS_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void BS_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * BS_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void BS_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* BS_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int BS_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) BS_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* BS_lex_init_extra has the same functionality as BS_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to BS_alloc in
 * the yyextra field.
 */

int BS_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    BS_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) BS_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    BS_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from BS_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * BS_lex_init()
     */
    return 0;
}

/* BS_lex_destroy is for both reentrant and non-reentrant scanners. */
int BS_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		BS__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		BS_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	BS_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        BS_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * BS_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    BS_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *BS_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *BS_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void BS_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see BS_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 503 "bs.l"



bool BS_HasNext(void* ptr)
{
    yyguts_t* yyg = static_cast<yyguts_t*>(ptr);
    return yyextra->mBufferPosition < yyextra->mFileBuffer->GetFileSize();
}

int BS_readInput(struct yyguts_t* yyg, char * buffer, yy_size_t& result, int maxToRead)
{
    if (yyextra->GetDefineStackCount() > 0)
    {
        Pegasus::BlockScript::CompilerState::DefineBufferEl* bufferEl = yyextra->GetDefineStackTop();
        const Pegasus::BlockScript::Preprocessor::Definition* def = bufferEl->mDef;
        if (def->mValue != nullptr)
        {
            if (bufferEl->mBufferPosition >= def->mBufferSize)
            {
                result = 0;
            }
            else
            {
				int bytesLeft = def->mBufferSize - bufferEl->mBufferPosition;
                int bytesRead = maxToRead > bytesLeft ? bytesLeft : maxToRead;
                Pegasus::Utils::Memcpy(buffer, def->mValue + bufferEl->mBufferPosition, bytesRead);
                bufferEl->mBufferPosition += bytesRead;
                result = static_cast<yy_size_t>(bytesRead);

                if (def->mIsInclude && bufferEl->mBufferPosition >= def->mBufferSize)
                {
                    yyextra->GetPreprocessor().GetFileIncluder()->Close(def->mValue);
                }
            }
        }
        else
        {
            result = 0;
        }
    }
    else
    {
        int bytesLeft = yyextra->mFileBuffer->GetFileSize() - yyextra->mBufferPosition;
        int bytesRead = maxToRead > bytesLeft ? bytesLeft : maxToRead;
        Pegasus::Utils::Memcpy(buffer, yyextra->mFileBuffer->GetBuffer() + yyextra->mBufferPosition, bytesRead);
        yyextra->mBufferPosition += bytesRead;
        result = static_cast<yy_size_t>(bytesRead);
    }
    return 0;//always correct
}

